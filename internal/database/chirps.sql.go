// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps(
    id,
    created_at,
    updated_at,
    body,
    user_id
) VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type CreateChirpParams struct {
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const deleteAllChirps = `-- name: DeleteAllChirps :exec
TRUNCATE chirps CASCADE
`

func (q *Queries) DeleteAllChirps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllChirps)
	return err
}

const deleteChirp = `-- name: DeleteChirp :one

DELETE FROM chirps
WHERE user_id = $1 AND id = $2
RETURNING id, created_at, updated_at, body, user_id
`

type DeleteChirpParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) DeleteChirp(ctx context.Context, arg DeleteChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, deleteChirp, arg.UserID, arg.ID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT id, created_at, updated_at, body, user_id FROM chirps
ORDER BY 
CASE WHEN UPPER($1::text) = 'ASC' THEN created_at END ASC,
CASE WHEN UPPER($1::text) = 'DESC' THEN created_at END DESC
`

func (q *Queries) GetAllChirps(ctx context.Context, sortOrder string) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps, sortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllChirpsFromUser = `-- name: GetAllChirpsFromUser :many
SELECT id, created_at, updated_at, body, user_id FROM chirps
WHERE user_id = $1
ORDER BY 
CASE WHEN UPPER($2::text) = 'ASC' THEN created_at END ASC,
CASE WHEN UPPER($2::text) = 'DESC' THEN created_at END DESC
`

type GetAllChirpsFromUserParams struct {
	UserID    uuid.UUID `json:"user_id"`
	SortOrder string    `json:"sort_order"`
}

func (q *Queries) GetAllChirpsFromUser(ctx context.Context, arg GetAllChirpsFromUserParams) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirpsFromUser, arg.UserID, arg.SortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirp = `-- name: GetChirp :one
SELECT id, created_at, updated_at, body, user_id FROM chirps
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}
